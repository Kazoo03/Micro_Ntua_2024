#define F_CPU 16000000UL
#include<avr/io.h>
#include<avr/interrupt.h>
#include<util/delay.h>
#define PCA9555_0_ADDRESS 0x40 //A0=A1=A2=0 by hardwawe
#define TWI_READ 1 // reading from twi device
#define TWI_WRITE 0 // writing to twi device
#define SCL_CLOCK 100000L // twi clock in ΗΖ
//Fscl=Fcpu/(16+2*TWBR0_VALUE*PRESCALER_VALUE)
#define TWBR0_VALUE ((F_CPU/SCL_CLOCK)-16)/2
// PCA9555 REGISTERS
typedef enum {
REG_INPUT_0 = 0,
REG_INPUT_1 = 1,
REG_OUTPUT_0 = 2,
REG_OUTPUT_1 = 3,
REG_POLARITY_INV_0 = 4,
REG_POLARITY_INV_1 = 5,
REG_CONFIGURATION_0 = 6,
REG_CONFIGURATION_1 = 7
} PCA9555_REGISTERS;
//----------- Master Transmitter/Receiver -------------------
#define TW_START 0x08
#define TW_REP_START 0x10
//---------------- Master Transmitter ----------------------
#define TW_MT_SLA_ACK 0x18
#define TW_MT_SLA_NACK 0x20
#define TW_MT_DATA_ACK 0x28
//---------------- Master Receiver ----------------
#define TW_MR_SLA_ACK 0x40
#define TW_MR_SLA_NACK 0x48
#define TW_MR_DATA_NACK 0x58
#define TW_STATUS_MASK 0b11111000
#define TW_STATUS (TWSR0 & TW_STATUS_MASK)
//initialize TWI clock
void twi_init(void)
{
TWSR0 = 0; // PRESCALER_VALUE=1
TWBR0 = TWBR0_VALUE; // SCL_CLOCK 100KHz
}
// Read one byte from the twi device (request more data from device)
unsigned char twi_readAck(void)
{
TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
while(!(TWCR0 & (1<<TWINT)));
return TWDR0;
}
//Read one byte from the twi device, read is followed by a stop condition
unsigned char twi_readNak(void)
{
TWCR0 = (1<<TWINT) | (1<<TWEN);
while(!(TWCR0 & (1<<TWINT)));
return TWDR0;
}
// Issues a start condition and sends address and transfer direction.
// return 0 = device accessible, 1= failed to access device
unsigned char twi_start(unsigned char address)
{
uint8_t twi_status;
// send START condition
TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
// wait until transmission completed
while(!(TWCR0 & (1<<TWINT)));
// check value of TWI Status Register.
twi_status = TW_STATUS & 0xF8;
if ( (twi_status != TW_START) && (twi_status != TW_REP_START)) return 1;
// send device address
TWDR0 = address;
TWCR0 = (1<<TWINT) | (1<<TWEN);
// wail until transmission completed and ACK/NACK has been received
while(!(TWCR0 & (1<<TWINT)));
// check value of TWI Status Register.
twi_status = TW_STATUS & 0xF8;
if ( (twi_status != TW_MT_SLA_ACK) && (twi_status != TW_MR_SLA_ACK) )
{
return 1;
}
return 0;

}
// Send start condition, address, transfer direction.
// Use ack polling to wait until device is ready
void twi_start_wait(unsigned char address)
{
uint8_t twi_status;
while ( 1 )
{
// send START condition
TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
// wait until transmission completed
while(!(TWCR0 & (1<<TWINT)));
// check value of TWI Status Register.
twi_status = TW_STATUS & 0xF8;
if ( (twi_status != TW_START) && (twi_status != TW_REP_START)) continue;
// send device address
TWDR0 = address;
TWCR0 = (1<<TWINT) | (1<<TWEN);
// wail until transmission completed
while(!(TWCR0 & (1<<TWINT)));
// check value of TWI Status Register.
twi_status = TW_STATUS & 0xF8;
if ( (twi_status == TW_MT_SLA_NACK )||(twi_status ==TW_MR_DATA_NACK) )
{
/* device busy, send stop condition to terminate write operation */
TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
// wait until stop condition is executed and bus released
while(TWCR0 & (1<<TWSTO));
continue;
}
break;
}
}
// Send one byte to twi device, Return 0 if write successful or 1 if write failed
unsigned char twi_write( unsigned char data )
{
// send data to the previously addressed device
TWDR0 = data;
TWCR0 = (1<<TWINT) | (1<<TWEN);
// wait until transmission completed
while(!(TWCR0 & (1<<TWINT)));
if( (TW_STATUS & 0xF8) != TW_MT_DATA_ACK) return 1;
return 0;
}
// Send repeated start condition, address, transfer direction
//Return: 0 device accessible
// 1 failed to access device
unsigned char twi_rep_start(unsigned char address)
{
return twi_start( address );
}
// Terminates the data transfer and releases the twi bus
void twi_stop(void)
{
// send stop condition
TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
// wait until stop condition is executed and bus released
while(TWCR0 & (1<<TWSTO));
}

void PCA9555_0_write(PCA9555_REGISTERS reg, uint8_t value)
{
twi_start_wait(PCA9555_0_ADDRESS + TWI_WRITE);
twi_write(reg);
twi_write(value);
twi_stop();
}
uint8_t PCA9555_0_read(PCA9555_REGISTERS reg)
{
uint8_t ret_val;
twi_start_wait(PCA9555_0_ADDRESS + TWI_WRITE);
twi_write(reg);
twi_rep_start(PCA9555_0_ADDRESS + TWI_READ);
ret_val = twi_readNak();
twi_stop();
return ret_val;
}
uint8_t scan_row(int a){
uint8_t b = 0 ;
if(a==1){
PCA9555_0_write(REG_OUTPUT_1, 0xF7);
PCA9555_0_write(REG_INPUT_1, 0xFF);
b = PCA9555_0_read(REG_INPUT_1);}
else if (a==2){
PCA9555_0_write(REG_OUTPUT_1, 0xFB);
PCA9555_0_write(REG_INPUT_1, 0xFF);
b = PCA9555_0_read(REG_INPUT_1);}
else if(a==3){
PCA9555_0_write(REG_OUTPUT_1, 0xFD);
PCA9555_0_write(REG_INPUT_1, 0xFF);
b = PCA9555_0_read(REG_INPUT_1);}
else if(a==4){
PCA9555_0_write(REG_OUTPUT_1, 0xFE);
PCA9555_0_write(REG_INPUT_1, 0xFF);
b = PCA9555_0_read(REG_INPUT_1);}
b = b>>4;
b= b^(0x0F);
return b;
}
uint16_t scan_keypad(){
uint16_t a;
a = scan_row(1);
a = a << 4;
a = scan_row(2) + a;
a = a << 4;
a = scan_row(3) + a;
a = a << 4;
a = scan_row(4) + a;
return a;
}
uint16_t pressed_keys;
void scan_keypad_rising_edge(){
uint16_t pressed_keys_tempo;
pressed_keys_tempo = scan_keypad();
_delay_ms(17);
pressed_keys = scan_keypad();
pressed_keys = pressed_keys_tempo & pressed_keys;
}

uint8_t keypad_to_ascii()
{
scan_keypad_rising_edge();
uint16_t temp = pressed_keys;
uint8_t array[16] = {'A','3','2','1','B','6','5','4','C','9','8','7','D','#','0','*'};
uint8_t a = 0;
for (int i=0; i<16; i++)
{
if((temp&&0x01)!=0){a=array[15-i];temp = pressed_keys; temp = temp>>(i+1);}
else {temp = pressed_keys; temp = temp>>(i+1);}
}
return a;
}
int main(){
twi_init();
PCA9555_0_write(REG_CONFIGURATION_1, 0xF0);
PCA9555_0_write(REG_OUTPUT_1, 0);
DDRB = 0xFF;
uint8_t a=0,b=0;
while(1){
a = keypad_to_ascii();
while(pressed_keys != 0){scan_keypad_rising_edge();}
while(a!=0){
b = keypad_to_ascii();
while(pressed_keys != 0){scan_keypad_rising_edge();}
if(b!=0){
if ((a=='1')&&(b=='5')){
PORTB = 0xFF;
_delay_ms(3000);
PORTB = 0x00;
_delay_ms(2000);}
else {
for(int i=0; i<5; i++){
PORTB=0xFF;
_delay_ms(500);
PORTB = 0x00;
_delay_ms(500);
}
}
a = 0;
b = 0;
}
}
}
}
