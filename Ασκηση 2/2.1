.include "m328PBdef.inc"
.equ FOSC_MHZ = 16
.equ DEL_ms = 500
.equ DEL_ms2 = 30
.equ DEL_NU = FOSC_MHZ*DEL_ms
.equ DEL_NU2 = FOSC_MHZ*DEL_ms2
.org 0x0
rjmp reset
.org 0x4
rjmp ISR1
ldi r24,LOW(RAMEND)
out SPL, r24
ldi r24, HIGH(RAMEND)
out SPH, r24
reset:
ldi r24,(1<<ISC11)|(1<<ISC10) ;INT1 διακοπή
sts EICRA, r24
ldi r24,(1<<INT1)
out EIMSK, r24
sei
ser r26 ;έξοδοι B,C
out DDRB, r26
out DDRC, r26
clr r26 ;είσοδος D
out DDRD, r26
ldi r27,0
out PORTC,r27
loop1: ;κώδικας από 2.1
clr r26
loop2:
out PORTB, r26
ldi r24, low(DEL_NU)
ldi r25, high(DEL_NU)
rcall delay_ms

inc r26

cpi r26, 16
breq loop1
rjmp loop2
delay_ms:
ldi r23, 249
loop_inn:
dec r23
nop
brne loop_inn
sbiw r24,1
brne delay_ms
ret

ISR1: ; χειρισμός διακοπής
push r25 ;διαχείριση στοίβας κατά την διακοπή
push r24
in r24, SREG
push r24
s: ;αρχή διαχείρησης σπινθηρισμού
ldi r21, (1 << INTF1) ;υλοποίηση του λογικού
out EIFR, r21 ;διαγράμματος που δόθηκε
ldi r24, low(DEL_NU2)
ldi r25, high(DEL_NU2)
rcall delay_ms
in r21, EIFR
andi r21,0x02
cpi r21,0
brne s ; τέλος διαχείρισης σπινθηριμού
in r28,PIND
andi r28, 32 ;αν είναι πατημένο το PD5 πήγαινε
cpi r28,32 ;στην ρουτίνα pressedD5
brne pressedD5
inc r27
cpi r27,64 ;αλλιώς αύξησε κατά ένα μέχρι να
breq Czero ;γίνει 64 και εκτύπωσε
out PORTC,r27 ;Αν 64, πήγαινε στη Czero
pop r24 ;διαχείριση στοίβας στο τέλος της διακοπής
out SREG, r24 ;(εκδοχή1)
pop r24
pop r25
reti

Czero: ;μηδένισε έξοδο C και εκτύπωσε
ldi r27,0

out PORTC,r27
pop r24 ;διαχείριση στοίβας στο τέλος της διακοπής
out SREG, r24 ;(εκδοχή2)
pop r24
pop r25
reti

pressedD5: ;(μην κάνεις τίποτα)
pop r24 ;διαχείριση στοίβας στο τέλος της διακοπής
out SREG, r24 ;(εκδοχή3)
pop r24
pop r25
reti
