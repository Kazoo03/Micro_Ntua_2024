#include <avr/io.h>
#define F_CPU 16000000UL
#include <util/delay.h>
#include<avr/interrupt.h>
#define PCA9555_0_ADDRESS 0x40 //A0=A1=A2=0 by hardware
#define TWI_READ 1 // reading from twi device
#define TWI_WRITE 0 // writing to twi device
#define SCL_CLOCK 100000L // twi clock in Hz
//Fscl=Fcpu/(16+2*TWBR0_VALUE*PRESCALER_VALUE)
#define TWBR0_VALUE ((F_CPU/SCL_CLOCK)-16)/2
// PCA9555 REGISTERS
typedef enum {
REG_INPUT_0 = 0,
REG_INPUT_1 = 1,
REG_OUTPUT_0 = 2,
REG_OUTPUT_1 = 3,
REG_POLARITY_INV_0 = 4,
REG_POLARITY_INV_1 = 5,
REG_CONFIGURATION_0 = 6,
REG_CONFIGURATION_1 = 7
} PCA9555_REGISTERS;
//----------- Master Transmitter/Receiver -------------------
#define TW_START 0x08
#define TW_REP_START 0x10
//---------------- Master Transmitter ----------------------
#define TW_MT_SLA_ACK 0x18
#define TW_MT_SLA_NACK 0x20
#define TW_MT_DATA_ACK 0x28
//---------------- Master Receiver ----------------
#define TW_MR_SLA_ACK 0x40
#define TW_MR_SLA_NACK 0x48
#define TW_MR_DATA_NACK 0x58

#define TW_STATUS_MASK 0b11111000
#define TW_STATUS (TWSR0 & TW_STATUS_MASK)
//initialize TWI clock
void twi_init(void)
{
TWSR0 = 0; // PRESCALER_VALUE=1
TWBR0 = TWBR0_VALUE; // SCL_CLOCK 100KHz
}
// Read one byte from the twi device (request more data from device)
unsigned char twi_readAck(void)
{
TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
while(!(TWCR0 & (1<<TWINT)));
return TWDR0;
}
//Read one byte from the twi device, read is followed by a stop condition
unsigned char twi_readNak(void)
{
TWCR0 = (1<<TWINT) | (1<<TWEN);
while(!(TWCR0 & (1<<TWINT)));
return TWDR0;
}
// Issues a start condition and sends address and transfer direction.
// return 0 = device accessible, 1= failed to access device
unsigned char twi_start(unsigned char address)
{
uint8_t twi_status;
// send START condition
TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
// wait until transmission completed
while(!(TWCR0 & (1<<TWINT)));
// check value of TWI Status Register.
twi_status = TW_STATUS & 0xF8;
if ( (twi_status != TW_START) && (twi_status != TW_REP_START)) return 1;
// send device address
TWDR0 = address;
TWCR0 = (1<<TWINT) | (1<<TWEN);
// wail until transmission completed and ACK/NACK has been received
while(!(TWCR0 & (1<<TWINT)));
// check value of TWI Status Register.
twi_status = TW_STATUS & 0xF8;
if ( (twi_status != TW_MT_SLA_ACK) && (twi_status != TW_MR_SLA_ACK) )
{
return 1;
}
return 0;
}
// Send start condition, address, transfer direction.
// Use ack polling to wait until device is ready
void twi_start_wait(unsigned char address)

{
uint8_t twi_status;
while ( 1 )
{
// send START condition
TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
// wait until transmission completed
while(!(TWCR0 & (1<<TWINT)));
// check value of TWI Status Register.
twi_status = TW_STATUS & 0xF8;
if ( (twi_status != TW_START) && (twi_status != TW_REP_START)) continue;
// send device address
TWDR0 = address;
TWCR0 = (1<<TWINT) | (1<<TWEN);
// wail until transmission completed
while(!(TWCR0 & (1<<TWINT)));
// check value of TWI Status Register.
twi_status = TW_STATUS & 0xF8;
if ( (twi_status == TW_MT_SLA_NACK )||(twi_status ==TW_MR_DATA_NACK) )
{
/* device busy, send stop condition to terminate write operation */
TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
// wait until stop condition is executed and bus released
while(TWCR0 & (1<<TWSTO));
continue;
}
break;
}
}
// Send one byte to twi device, Return 0 if write successful or 1 if write failed
unsigned char twi_write( unsigned char data )
{
// send data to the previously addressed device
TWDR0 = data;
TWCR0 = (1<<TWINT) | (1<<TWEN);
// wait until transmission completed
while(!(TWCR0 & (1<<TWINT)));
if( (TW_STATUS & 0xF8) != TW_MT_DATA_ACK) return 1;
return 0;
}
// Send repeated start condition, address, transfer direction
//Return: 0 device accessible
// 1 failed to access device
unsigned char twi_rep_start(unsigned char address)
{
return twi_start( address );
}
// Terminates the data transfer and releases the twi bus
void twi_stop(void)

{
// send stop condition
TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
// wait until stop condition is executed and bus released
while(TWCR0 & (1<<TWSTO));
}
void PCA9555_0_write(PCA9555_REGISTERS reg, uint8_t value)
{
twi_start_wait(PCA9555_0_ADDRESS + TWI_WRITE);
twi_write(reg);
twi_write(value);
twi_stop();
}
uint8_t PCA9555_0_read(PCA9555_REGISTERS reg)
{
uint8_t ret_val;
twi_start_wait(PCA9555_0_ADDRESS + TWI_WRITE);
twi_write(reg);
twi_rep_start(PCA9555_0_ADDRESS + TWI_READ);
ret_val = twi_readNak();
twi_stop();
return ret_val;
}

uint8_t one_wire_receive_bit() {
uint8_t temp=0;
uint8_t bit=0;
DDRD |= 0x10;
PORTD &= 0xEF;
_delay_us(2);
DDRD &= 0xEF;
PORTD &= 0xEF;
_delay_us(10);
temp = (PIND & 0x10);
_delay_us(49);
if (temp == 0x10) {bit = 0x01;}
else bit = 0x00;
return bit;
}
uint8_t one_wire_receive_byte() {
uint8_t bit;
uint8_t byte = 0x00;
for (int i = 0; i < 8; i++)
{
byte = (byte >> 1);
bit = one_wire_receive_bit();
if (bit == 0x01) bit = 0x80;
byte = (byte | bit);

}
return byte;
}
void one_wire_transmit_bit(uint8_t bit){
DDRD |= 0x10;
PORTD &= 0xEF;
_delay_us(2);
if(bit==1) PORTD |= 0x10;
else PORTD &= 0xEF;
_delay_us(58);
DDRD &= 0xEF;
PORTD &= 0xEF;
_delay_us(1);
return;
}
void one_wire_transmit_byte(uint8_t byte){
uint8_t bit;
for (int i = 0; i < 8; i++)
{
bit = byte & 0x01;
one_wire_transmit_bit( bit );
byte = (byte >> 1);
}
return;
}
uint8_t one_wire_reset(){
DDRD |= 0x10;
PORTD &= 0xEF;
_delay_us(480);
DDRD &= 0xEF;
PORTD &= 0xEF;
_delay_us(100);
uint8_t temp = (PIND & 0x10);
_delay_us(380);
if(temp==0){
return 1;
}else return 0;
}

void Write_2_Nibbles(uint8_t in) {
uint8_t temp = in;
uint8_t p = PCA9555_0_read(REG_OUTPUT_0);
p &= 0x0F;
in &= 0xF0;
in |= p;
PCA9555_0_write(REG_OUTPUT_0, in);
in |= 0x08;
PCA9555_0_write(REG_OUTPUT_0, in);
in &= 0xF7;

PCA9555_0_write(REG_OUTPUT_0, in);
in = temp;
in &= 0x0F;
in = in << 4;
in |= p;
PCA9555_0_write(REG_OUTPUT_0, in);
in |= 0x08;
PCA9555_0_write(REG_OUTPUT_0, in);
in &= 0xF7;
PCA9555_0_write(REG_OUTPUT_0, in);
return;
}
void LCD_data(uint8_t c) {
// uint8_t p = PCA9555_0_read(REG_OUTPUT_0);
uint8_t p = c;
p |= 0x04;
PCA9555_0_write(REG_OUTPUT_0, p);
Write_2_Nibbles(c);
_delay_us(100);
return;
}
void LCD_command(uint8_t c) {
// uint8_t p = PCA9555_0_read(REG_OUTPUT_0);
uint8_t p = c;
p &= 0xFB;
PCA9555_0_write(REG_OUTPUT_0, p);
Write_2_Nibbles(c);
_delay_us(100);
return;
}
void LCD_init(void) {
_delay_ms(40);
int p = 0x30;
PCA9555_0_write(REG_OUTPUT_0, p);
p |= 0x08;
PCA9555_0_write(REG_OUTPUT_0, p);
p &= 0xF7;
PCA9555_0_write(REG_OUTPUT_0, p);
_delay_us(100);
p = 0x30;
PCA9555_0_write(REG_OUTPUT_0, p);
p |= 0x08;
PCA9555_0_write(REG_OUTPUT_0, p);
p &= 0xF7;
PCA9555_0_write(REG_OUTPUT_0, p);
_delay_us(100);
p = 0x20;
PCA9555_0_write(REG_OUTPUT_0, p);
p |= 0x08;
PCA9555_0_write(REG_OUTPUT_0, p);

p &= 0xF7;
PCA9555_0_write(REG_OUTPUT_0, p);
_delay_us(100);
LCD_command(0x28);
LCD_command(0x0C);
LCD_command(0x01);
_delay_us(5000);
LCD_command(0x06);
}
int main(){
twi_init();
PCA9555_0_write(REG_CONFIGURATION_0, 0x00);
PCA9555_0_write(REG_CONFIGURATION_1, 0xF0);
PCA9555_0_write(REG_OUTPUT_1, 0);
LCD_init();
DDRD=0xFF;
DDRB = 0xFF;
uint16_t num;
float tem=0;
uint8_t temint1=0,temint2=0,temint3=0,temint4=0;
uint8_t r25 = 0,r24 = 0;
int a =0;
while(1){
num=0;
int check = one_wire_reset();
if (check==1){
one_wire_transmit_byte(0xCC);
one_wire_transmit_byte(0x44);
while(one_wire_receive_bit() != 0x01);
check = one_wire_reset();
if (check==1){
one_wire_transmit_byte(0xCC);
one_wire_transmit_byte(0xBE);
r24 = one_wire_receive_byte();
r25 = one_wire_receive_byte();}
}
if(check == 0) {r25 = 0x80; r24= 0x00;}
num = r25;
num = num <<8;
num = num + r24;
if(num == 0x8000){
LCD_init();
LCD_command(0x01);
_delay_ms(5);
LCD_data('N');
LCD_data('O');

LCD_data(' ');
LCD_data('D');
LCD_data('E');
LCD_data('V');
LCD_data('I');
LCD_data('C');
LCD_data('E');
_delay_ms(1000);
}
else {
if((r25&0xF8)==0xF8){num = 0xFFFF - num + 0x0001; a= 1;}
tem = 0;
if((num&0x0001)== 0x0001){tem = 0.0625;}
if((num&0x0002)== 0x0002){tem = 0.125 + tem;}
if((num&0x0004)== 0x0004){tem = 0.25 + tem;}
if((num&0x0008)== 0x0008){tem = 0.5 + tem;}
if((num&0x0010)== 0x0010){tem = 1+ tem;}
if((num&0x0020)== 0x0020){tem = 2 + tem;}
if((num&0x0040)== 0x0040){tem = 4 + tem;}
if((num&0x0080)== 0x0080){tem = 8 + tem;}
if((num&0x0100)== 0x0100){tem = 16+ tem;}
if((num&0x0200)== 0x0200){tem = 32 + tem;}
if((num&0x0400)== 0x0400){tem = 64 + tem;}
temint1=0;
temint2=0;
temint3=0;
temint4=0;
temint1 = (tem/100);
temint2 = (tem/10)-(temint1*10);
temint3 = (tem)- (temint2*10)-(temint1*100);
temint4 = (tem *10) - (temint3*10) - (temint2*100)-(temint1*1000);
temint1 |= 0x30; //convert to Ascii
temint2 |= 0x30;
temint3 |= 0x30;
temint4 |= 0x30;
LCD_init();
LCD_command(0x01);
_delay_ms(5);
if(a==1){LCD_data('-'); a=0;}
LCD_data(temint1);
LCD_data(temint2);
LCD_data(temint3);
LCD_data('.');
LCD_data(temint4);
_delay_ms(1000);
}
}
}
