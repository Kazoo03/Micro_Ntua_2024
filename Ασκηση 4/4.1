.include "m328PBdef.inc"
.equ PD0=0
.equ PD1=1
.equ PD2=2
.equ PD3=3
.equ PD4=4
.equ PD5=5
.equ PD6=6
.equ PD7=7
.def temp = r16
.org 0x00
rjmp reset
.org 0x2A
rjmp adc_int
write_2_nibbles: οπως δινεται στο παράδειγμα του φιλαδιου
lcd_data: οπως δινεται στο παράδειγμα του φιλαδιου
lcd_command: οπως δινεται στο παράδειγμα του φιλαδιου
lcd_clear_display: οπως δινεται στο παράδειγμα του φιλαδιου
lcd_init: οπως δινεται στο παράδειγμα του φιλαδιου
reset:
ldi temp, high(RAMEND)
out SPH,temp

ldi temp, low(RAMEND)
out SPL,temp
ldi temp, 0xFF
out DDRD, temp
sei
rcall lcd_init
ldi temp, (1 << REFS0) | (1 << MUX0)
sts ADMUX, temp
ldi temp, (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADIE)
sts ADCSRA, temp
ldi r24, low(100)
ldi r25, high(100) ; delay 100 mS
rcall wait_msec
main:
ldi r24, low(1000)
ldi r25, high(1000) ; delay 100 mS
rcall wait_msec
clr temp
lds temp, ADCSRA
ori temp, (1 << ADSC)
sts ADCSRA, temp
rjmp main
adc_int: ;βρίσκουμε πόσο είναι το ADC και το επεξεργαζομαι
rcall lcd_init
lds r26,ADCL
lds r27,ADCH
lsr r27
ror r26;κάνουμε το διπλό καταχωρητή δύο logical shift right ώστε να είναι όλα στο σε ένα
lsr r27
ror r26 ;ετσι θεωρώ πως ό,τι βρίσκεται στο low register είναι το δεκαδικό μέρος του αριθμού
clr r18
clr r17
mov r17, r26
add r26, r17
adc r27, r18
add r26, r17
adc r27, r18
add r26, r17
adc r27, r18
add r26, r17
adc r27, r18 ; ×5
ori r27, 0b00110000 ; ότι είναι στο r17 θα είναι το πρώτο ψηφίο
clr r17
clr r18
clr r20
clr r21
check1:
mov r18, r26
andi r18, 0b10000000
cpi r18, 0
brne p05
check2:
mov r18, r26
andi r18, 0b01000000
cpi r18, 0
brne p025
check3:
mov r18, r26

andi r18, 0b00100000
cpi r18, 0
brne p0125
check4:
mov r18, r26
andi r18, 0b00010000
cpi r18, 0
brne p0062
check5:
mov r18, r26
andi r18, 0b00001000
cpi r18, 0
brne p0031
check6:
mov r18, r26
andi r18, 0b00000100
cpi r18, 0
brne p0015
check7:
mov r18, r26
andi r18, 0b00000100
cpi r18, 0
brne p0007
check8:
mov r18, r26
andi r18, 0b00000100
cpi r18, 0
brne p0003
check9:
mov r18, r26
andi r18, 0b00111111
cpi r18, 0
brne p01
rjmp endlsd
p05:
ldi r18, 5
add r17, r18
rjmp check2
p025:
ldi r18, 2
add r17, r18
ldi r18, 5
add r20, r18
rjmp check3
p0125:
ldi r18, 1
add r17, r18
ldi r18, 2
add r20, r18
ldi r18, 5
add r21, r18
rjmp check4
p0062:
ldi r18, 6
add r20, r18
ldi r18, 2
add r21, r18
rjmp check5

p0031:
ldi r18, 3
add r20, r18
ldi r18, 1
add r21, r18
rjmp check6
p0015:
ldi r18, 1
add r20, r18
ldi r18, 5
add r21, r18
rjmp check7
p0007:
ldi r18, 7
add r21, r18
rjmp check8
p0003:
ldi r18, 3
add r20, r18
rjmp check9
p01:
cpi r21, 20
brsh p2
cpi r21, 10
brsh p1
rjmp endlsd
p1:
ldi r18, 1
add r20, r18
rjmp endlsd
p2:
ldi r18, 2
add r20, r18
rjmp endlsd
decrease:
ldi r18,10
sub r20, r18
ldi r18, 1
add r17, r18;ελέγχος κάθε ψηφίο και επεξεργασια του lower register
endlsd:
cpi r20, 10
brge decrease
ori r17, 0b00110000
ori r20, 0b00110000
mov r24,r27
rcall lcd_data
ldi r24, '.'
rcall lcd_data
mov r24,r17
rcall lcd_data
mov r24,r20
rcall lcd_data
reti
wait_msec: οπως δινεται στο παράδειγμα του φιλαδιου
wait_usec: οπως δινεται στο παράδειγμα του φιλαδιου
